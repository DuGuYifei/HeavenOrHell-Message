// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AttackMessage;
struct AttackMessageDefaultTypeInternal;
extern AttackMessageDefaultTypeInternal _AttackMessage_default_instance_;
class MoveMessage;
struct MoveMessageDefaultTypeInternal;
extern MoveMessageDefaultTypeInternal _MoveMessage_default_instance_;
class PlayerBasicMessage;
struct PlayerBasicMessageDefaultTypeInternal;
extern PlayerBasicMessageDefaultTypeInternal _PlayerBasicMessage_default_instance_;
class PropGetMessage;
struct PropGetMessageDefaultTypeInternal;
extern PropGetMessageDefaultTypeInternal _PropGetMessage_default_instance_;
class StringMessage;
struct StringMessageDefaultTypeInternal;
extern StringMessageDefaultTypeInternal _StringMessage_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AttackMessage* Arena::CreateMaybeMessage<::message::AttackMessage>(Arena*);
template<> ::message::MoveMessage* Arena::CreateMaybeMessage<::message::MoveMessage>(Arena*);
template<> ::message::PlayerBasicMessage* Arena::CreateMaybeMessage<::message::PlayerBasicMessage>(Arena*);
template<> ::message::PropGetMessage* Arena::CreateMaybeMessage<::message::PropGetMessage>(Arena*);
template<> ::message::StringMessage* Arena::CreateMaybeMessage<::message::StringMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class MoveMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.MoveMessage) */ {
 public:
  inline MoveMessage() : MoveMessage(nullptr) {}
  ~MoveMessage() override;
  explicit constexpr MoveMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveMessage(const MoveMessage& from);
  MoveMessage(MoveMessage&& from) noexcept
    : MoveMessage() {
    *this = ::std::move(from);
  }

  inline MoveMessage& operator=(const MoveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveMessage& operator=(MoveMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveMessage* internal_default_instance() {
    return reinterpret_cast<const MoveMessage*>(
               &_MoveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoveMessage& a, MoveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.MoveMessage";
  }
  protected:
  explicit MoveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:message.MoveMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AttackMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AttackMessage) */ {
 public:
  inline AttackMessage() : AttackMessage(nullptr) {}
  ~AttackMessage() override;
  explicit constexpr AttackMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttackMessage(const AttackMessage& from);
  AttackMessage(AttackMessage&& from) noexcept
    : AttackMessage() {
    *this = ::std::move(from);
  }

  inline AttackMessage& operator=(const AttackMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttackMessage& operator=(AttackMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttackMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttackMessage* internal_default_instance() {
    return reinterpret_cast<const AttackMessage*>(
               &_AttackMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttackMessage& a, AttackMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AttackMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttackMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttackMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttackMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttackMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AttackMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AttackMessage";
  }
  protected:
  explicit AttackMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kSkillIdFieldNumber = 2,
  };
  // int32 target_id = 1;
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // int32 skill_id = 2;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AttackMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t target_id_;
  int32_t skill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PlayerBasicMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.PlayerBasicMessage) */ {
 public:
  inline PlayerBasicMessage() : PlayerBasicMessage(nullptr) {}
  ~PlayerBasicMessage() override;
  explicit constexpr PlayerBasicMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerBasicMessage(const PlayerBasicMessage& from);
  PlayerBasicMessage(PlayerBasicMessage&& from) noexcept
    : PlayerBasicMessage() {
    *this = ::std::move(from);
  }

  inline PlayerBasicMessage& operator=(const PlayerBasicMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBasicMessage& operator=(PlayerBasicMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerBasicMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerBasicMessage* internal_default_instance() {
    return reinterpret_cast<const PlayerBasicMessage*>(
               &_PlayerBasicMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerBasicMessage& a, PlayerBasicMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBasicMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBasicMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerBasicMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerBasicMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerBasicMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerBasicMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBasicMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.PlayerBasicMessage";
  }
  protected:
  explicit PlayerBasicMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPositionXFieldNumber = 2,
    kPositionYFieldNumber = 3,
    kHpFieldNumber = 4,
    kMaxHpFieldNumber = 5,
  };
  // int32 player_id = 1;
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // float position_x = 2;
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // float position_y = 3;
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // int32 hp = 4;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // int32 max_hp = 5;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.PlayerBasicMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t player_id_;
  float position_x_;
  float position_y_;
  int32_t hp_;
  int32_t max_hp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PropGetMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.PropGetMessage) */ {
 public:
  inline PropGetMessage() : PropGetMessage(nullptr) {}
  ~PropGetMessage() override;
  explicit constexpr PropGetMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropGetMessage(const PropGetMessage& from);
  PropGetMessage(PropGetMessage&& from) noexcept
    : PropGetMessage() {
    *this = ::std::move(from);
  }

  inline PropGetMessage& operator=(const PropGetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropGetMessage& operator=(PropGetMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropGetMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropGetMessage* internal_default_instance() {
    return reinterpret_cast<const PropGetMessage*>(
               &_PropGetMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropGetMessage& a, PropGetMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PropGetMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropGetMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropGetMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropGetMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropGetMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropGetMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropGetMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.PropGetMessage";
  }
  protected:
  explicit PropGetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropIdFieldNumber = 1,
    kPropTypeFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // int32 prop_id = 1;
  void clear_prop_id();
  int32_t prop_id() const;
  void set_prop_id(int32_t value);
  private:
  int32_t _internal_prop_id() const;
  void _internal_set_prop_id(int32_t value);
  public:

  // int32 prop_type = 2;
  void clear_prop_type();
  int32_t prop_type() const;
  void set_prop_type(int32_t value);
  private:
  int32_t _internal_prop_type() const;
  void _internal_set_prop_type(int32_t value);
  public:

  // int32 amount = 3;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.PropGetMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t prop_id_;
  int32_t prop_type_;
  int32_t amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class StringMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.StringMessage) */ {
 public:
  inline StringMessage() : StringMessage(nullptr) {}
  ~StringMessage() override;
  explicit constexpr StringMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMessage(const StringMessage& from);
  StringMessage(StringMessage&& from) noexcept
    : StringMessage() {
    *this = ::std::move(from);
  }

  inline StringMessage& operator=(const StringMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMessage& operator=(StringMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMessage* internal_default_instance() {
    return reinterpret_cast<const StringMessage*>(
               &_StringMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringMessage& a, StringMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StringMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.StringMessage";
  }
  protected:
  explicit StringMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageContentFieldNumber = 2,
    kMessageTypeFieldNumber = 1,
  };
  // string message_content = 2;
  void clear_message_content();
  const std::string& message_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_content();
  PROTOBUF_NODISCARD std::string* release_message_content();
  void set_allocated_message_content(std::string* message_content);
  private:
  const std::string& _internal_message_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_content(const std::string& value);
  std::string* _internal_mutable_message_content();
  public:

  // int32 message_type = 1;
  void clear_message_type();
  int32_t message_type() const;
  void set_message_type(int32_t value);
  private:
  int32_t _internal_message_type() const;
  void _internal_set_message_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.StringMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_content_;
  int32_t message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveMessage

// float x = 1;
inline void MoveMessage::clear_x() {
  x_ = 0;
}
inline float MoveMessage::_internal_x() const {
  return x_;
}
inline float MoveMessage::x() const {
  // @@protoc_insertion_point(field_get:message.MoveMessage.x)
  return _internal_x();
}
inline void MoveMessage::_internal_set_x(float value) {
  
  x_ = value;
}
inline void MoveMessage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:message.MoveMessage.x)
}

// float y = 2;
inline void MoveMessage::clear_y() {
  y_ = 0;
}
inline float MoveMessage::_internal_y() const {
  return y_;
}
inline float MoveMessage::y() const {
  // @@protoc_insertion_point(field_get:message.MoveMessage.y)
  return _internal_y();
}
inline void MoveMessage::_internal_set_y(float value) {
  
  y_ = value;
}
inline void MoveMessage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:message.MoveMessage.y)
}

// -------------------------------------------------------------------

// AttackMessage

// int32 target_id = 1;
inline void AttackMessage::clear_target_id() {
  target_id_ = 0;
}
inline int32_t AttackMessage::_internal_target_id() const {
  return target_id_;
}
inline int32_t AttackMessage::target_id() const {
  // @@protoc_insertion_point(field_get:message.AttackMessage.target_id)
  return _internal_target_id();
}
inline void AttackMessage::_internal_set_target_id(int32_t value) {
  
  target_id_ = value;
}
inline void AttackMessage::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:message.AttackMessage.target_id)
}

// int32 skill_id = 2;
inline void AttackMessage::clear_skill_id() {
  skill_id_ = 0;
}
inline int32_t AttackMessage::_internal_skill_id() const {
  return skill_id_;
}
inline int32_t AttackMessage::skill_id() const {
  // @@protoc_insertion_point(field_get:message.AttackMessage.skill_id)
  return _internal_skill_id();
}
inline void AttackMessage::_internal_set_skill_id(int32_t value) {
  
  skill_id_ = value;
}
inline void AttackMessage::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:message.AttackMessage.skill_id)
}

// -------------------------------------------------------------------

// PlayerBasicMessage

// int32 player_id = 1;
inline void PlayerBasicMessage::clear_player_id() {
  player_id_ = 0;
}
inline int32_t PlayerBasicMessage::_internal_player_id() const {
  return player_id_;
}
inline int32_t PlayerBasicMessage::player_id() const {
  // @@protoc_insertion_point(field_get:message.PlayerBasicMessage.player_id)
  return _internal_player_id();
}
inline void PlayerBasicMessage::_internal_set_player_id(int32_t value) {
  
  player_id_ = value;
}
inline void PlayerBasicMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:message.PlayerBasicMessage.player_id)
}

// float position_x = 2;
inline void PlayerBasicMessage::clear_position_x() {
  position_x_ = 0;
}
inline float PlayerBasicMessage::_internal_position_x() const {
  return position_x_;
}
inline float PlayerBasicMessage::position_x() const {
  // @@protoc_insertion_point(field_get:message.PlayerBasicMessage.position_x)
  return _internal_position_x();
}
inline void PlayerBasicMessage::_internal_set_position_x(float value) {
  
  position_x_ = value;
}
inline void PlayerBasicMessage::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:message.PlayerBasicMessage.position_x)
}

// float position_y = 3;
inline void PlayerBasicMessage::clear_position_y() {
  position_y_ = 0;
}
inline float PlayerBasicMessage::_internal_position_y() const {
  return position_y_;
}
inline float PlayerBasicMessage::position_y() const {
  // @@protoc_insertion_point(field_get:message.PlayerBasicMessage.position_y)
  return _internal_position_y();
}
inline void PlayerBasicMessage::_internal_set_position_y(float value) {
  
  position_y_ = value;
}
inline void PlayerBasicMessage::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:message.PlayerBasicMessage.position_y)
}

// int32 hp = 4;
inline void PlayerBasicMessage::clear_hp() {
  hp_ = 0;
}
inline int32_t PlayerBasicMessage::_internal_hp() const {
  return hp_;
}
inline int32_t PlayerBasicMessage::hp() const {
  // @@protoc_insertion_point(field_get:message.PlayerBasicMessage.hp)
  return _internal_hp();
}
inline void PlayerBasicMessage::_internal_set_hp(int32_t value) {
  
  hp_ = value;
}
inline void PlayerBasicMessage::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:message.PlayerBasicMessage.hp)
}

// int32 max_hp = 5;
inline void PlayerBasicMessage::clear_max_hp() {
  max_hp_ = 0;
}
inline int32_t PlayerBasicMessage::_internal_max_hp() const {
  return max_hp_;
}
inline int32_t PlayerBasicMessage::max_hp() const {
  // @@protoc_insertion_point(field_get:message.PlayerBasicMessage.max_hp)
  return _internal_max_hp();
}
inline void PlayerBasicMessage::_internal_set_max_hp(int32_t value) {
  
  max_hp_ = value;
}
inline void PlayerBasicMessage::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:message.PlayerBasicMessage.max_hp)
}

// -------------------------------------------------------------------

// PropGetMessage

// int32 prop_id = 1;
inline void PropGetMessage::clear_prop_id() {
  prop_id_ = 0;
}
inline int32_t PropGetMessage::_internal_prop_id() const {
  return prop_id_;
}
inline int32_t PropGetMessage::prop_id() const {
  // @@protoc_insertion_point(field_get:message.PropGetMessage.prop_id)
  return _internal_prop_id();
}
inline void PropGetMessage::_internal_set_prop_id(int32_t value) {
  
  prop_id_ = value;
}
inline void PropGetMessage::set_prop_id(int32_t value) {
  _internal_set_prop_id(value);
  // @@protoc_insertion_point(field_set:message.PropGetMessage.prop_id)
}

// int32 prop_type = 2;
inline void PropGetMessage::clear_prop_type() {
  prop_type_ = 0;
}
inline int32_t PropGetMessage::_internal_prop_type() const {
  return prop_type_;
}
inline int32_t PropGetMessage::prop_type() const {
  // @@protoc_insertion_point(field_get:message.PropGetMessage.prop_type)
  return _internal_prop_type();
}
inline void PropGetMessage::_internal_set_prop_type(int32_t value) {
  
  prop_type_ = value;
}
inline void PropGetMessage::set_prop_type(int32_t value) {
  _internal_set_prop_type(value);
  // @@protoc_insertion_point(field_set:message.PropGetMessage.prop_type)
}

// int32 amount = 3;
inline void PropGetMessage::clear_amount() {
  amount_ = 0;
}
inline int32_t PropGetMessage::_internal_amount() const {
  return amount_;
}
inline int32_t PropGetMessage::amount() const {
  // @@protoc_insertion_point(field_get:message.PropGetMessage.amount)
  return _internal_amount();
}
inline void PropGetMessage::_internal_set_amount(int32_t value) {
  
  amount_ = value;
}
inline void PropGetMessage::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:message.PropGetMessage.amount)
}

// -------------------------------------------------------------------

// StringMessage

// int32 message_type = 1;
inline void StringMessage::clear_message_type() {
  message_type_ = 0;
}
inline int32_t StringMessage::_internal_message_type() const {
  return message_type_;
}
inline int32_t StringMessage::message_type() const {
  // @@protoc_insertion_point(field_get:message.StringMessage.message_type)
  return _internal_message_type();
}
inline void StringMessage::_internal_set_message_type(int32_t value) {
  
  message_type_ = value;
}
inline void StringMessage::set_message_type(int32_t value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:message.StringMessage.message_type)
}

// string message_content = 2;
inline void StringMessage::clear_message_content() {
  message_content_.ClearToEmpty();
}
inline const std::string& StringMessage::message_content() const {
  // @@protoc_insertion_point(field_get:message.StringMessage.message_content)
  return _internal_message_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringMessage::set_message_content(ArgT0&& arg0, ArgT... args) {
 
 message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.StringMessage.message_content)
}
inline std::string* StringMessage::mutable_message_content() {
  std::string* _s = _internal_mutable_message_content();
  // @@protoc_insertion_point(field_mutable:message.StringMessage.message_content)
  return _s;
}
inline const std::string& StringMessage::_internal_message_content() const {
  return message_content_.Get();
}
inline void StringMessage::_internal_set_message_content(const std::string& value) {
  
  message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringMessage::_internal_mutable_message_content() {
  
  return message_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringMessage::release_message_content() {
  // @@protoc_insertion_point(field_release:message.StringMessage.message_content)
  return message_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringMessage::set_allocated_message_content(std::string* message_content) {
  if (message_content != nullptr) {
    
  } else {
    
  }
  message_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.StringMessage.message_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
