// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace message {
constexpr HelloMessage::HelloMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : room_id_(0){}
struct HelloMessageDefaultTypeInternal {
  constexpr HelloMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HelloMessageDefaultTypeInternal() {}
  union {
    HelloMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
constexpr Character::Character(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , character_type_(0)
{}
struct CharacterDefaultTypeInternal {
  constexpr CharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CharacterDefaultTypeInternal() {}
  union {
    Character _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CharacterDefaultTypeInternal _Character_default_instance_;
constexpr MessageWrapper::MessageWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MessageWrapperDefaultTypeInternal {
  constexpr MessageWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageWrapperDefaultTypeInternal() {}
  union {
    MessageWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageWrapperDefaultTypeInternal _MessageWrapper_default_instance_;
constexpr RoomMessage::RoomMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_()
  , is_join_(false)
  , room_id_(0)
  , player_id_(0){}
struct RoomMessageDefaultTypeInternal {
  constexpr RoomMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomMessageDefaultTypeInternal() {}
  union {
    RoomMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomMessageDefaultTypeInternal _RoomMessage_default_instance_;
constexpr StringMessage::StringMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_type_(0){}
struct StringMessageDefaultTypeInternal {
  constexpr StringMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringMessageDefaultTypeInternal() {}
  union {
    StringMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringMessageDefaultTypeInternal _StringMessage_default_instance_;
constexpr LobbyMessage::LobbyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_ready_(false)
  , player_id_(0)
  , character_type_(0)
{}
struct LobbyMessageDefaultTypeInternal {
  constexpr LobbyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LobbyMessageDefaultTypeInternal() {}
  union {
    LobbyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LobbyMessageDefaultTypeInternal _LobbyMessage_default_instance_;
constexpr StartReceiveMsgMessage::StartReceiveMsgMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct StartReceiveMsgMessageDefaultTypeInternal {
  constexpr StartReceiveMsgMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartReceiveMsgMessageDefaultTypeInternal() {}
  union {
    StartReceiveMsgMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartReceiveMsgMessageDefaultTypeInternal _StartReceiveMsgMessage_default_instance_;
constexpr PlayerBasicMessage::PlayerBasicMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , position_x_(0)
  , position_y_(0)
  , hp_(0)
  , max_hp_(0)
  , weak_timer_(0)
  , animation_type_(0)

  , character_state_(0)
{}
struct PlayerBasicMessageDefaultTypeInternal {
  constexpr PlayerBasicMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerBasicMessageDefaultTypeInternal() {}
  union {
    PlayerBasicMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerBasicMessageDefaultTypeInternal _PlayerBasicMessage_default_instance_;
constexpr PropTryGetMessage::PropTryGetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , prop_id_(0)
  , prop_type_(0){}
struct PropTryGetMessageDefaultTypeInternal {
  constexpr PropTryGetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropTryGetMessageDefaultTypeInternal() {}
  union {
    PropTryGetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropTryGetMessageDefaultTypeInternal _PropTryGetMessage_default_instance_;
constexpr PropGetMessage::PropGetMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_get_(false)
  , player_id_(0)
  , prop_id_(0){}
struct PropGetMessageDefaultTypeInternal {
  constexpr PropGetMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropGetMessageDefaultTypeInternal() {}
  union {
    PropGetMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropGetMessageDefaultTypeInternal _PropGetMessage_default_instance_;
constexpr IntegerMessage::IntegerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_type_(0)

  , value_(0){}
struct IntegerMessageDefaultTypeInternal {
  constexpr IntegerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerMessageDefaultTypeInternal() {}
  union {
    IntegerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerMessageDefaultTypeInternal _IntegerMessage_default_instance_;
constexpr Gate::Gate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gate_direction_(0)

  , gate_type_(0)
{}
struct GateDefaultTypeInternal {
  constexpr GateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GateDefaultTypeInternal() {}
  union {
    Gate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GateDefaultTypeInternal _Gate_default_instance_;
constexpr GateMessage::GateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gates_(){}
struct GateMessageDefaultTypeInternal {
  constexpr GateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GateMessageDefaultTypeInternal() {}
  union {
    GateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GateMessageDefaultTypeInternal _GateMessage_default_instance_;
constexpr EnterGateMessage::EnterGateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gate_direction_(0)
{}
struct EnterGateMessageDefaultTypeInternal {
  constexpr EnterGateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterGateMessageDefaultTypeInternal() {}
  union {
    EnterGateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterGateMessageDefaultTypeInternal _EnterGateMessage_default_instance_;
constexpr EnterGateResultMessage::EnterGateResultMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gate_(nullptr)
  , player_id_(0){}
struct EnterGateResultMessageDefaultTypeInternal {
  constexpr EnterGateResultMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterGateResultMessageDefaultTypeInternal() {}
  union {
    EnterGateResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterGateResultMessageDefaultTypeInternal _EnterGateResultMessage_default_instance_;
constexpr PlayerResultMessage::PlayerResultMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_result_(0)

  , player_id_(0){}
struct PlayerResultMessageDefaultTypeInternal {
  constexpr PlayerResultMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerResultMessageDefaultTypeInternal() {}
  union {
    PlayerResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerResultMessageDefaultTypeInternal _PlayerResultMessage_default_instance_;
constexpr GameResultMessage::GameResultMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_result_messages_()
  , game_result_(0)
{}
struct GameResultMessageDefaultTypeInternal {
  constexpr GameResultMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameResultMessageDefaultTypeInternal() {}
  union {
    GameResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameResultMessageDefaultTypeInternal _GameResultMessage_default_instance_;
constexpr ChatMessage::ChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_player_id_(0)
  , is_to_all_(false){}
struct ChatMessageDefaultTypeInternal {
  constexpr ChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
}  // namespace message
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::HelloMessage, room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::Character, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::Character, character_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::MessageWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::MessageWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::message::MessageWrapper, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoomMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RoomMessage, is_join_),
  PROTOBUF_FIELD_OFFSET(::message::RoomMessage, room_id_),
  PROTOBUF_FIELD_OFFSET(::message::RoomMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::RoomMessage, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::StringMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::StringMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::message::StringMessage, message_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::LobbyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::LobbyMessage, is_ready_),
  PROTOBUF_FIELD_OFFSET(::message::LobbyMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::LobbyMessage, character_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::StartReceiveMsgMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::StartReceiveMsgMessage, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, position_x_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, position_y_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, hp_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, max_hp_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, weak_timer_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, animation_type_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerBasicMessage, character_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::PropTryGetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::PropTryGetMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::PropTryGetMessage, prop_id_),
  PROTOBUF_FIELD_OFFSET(::message::PropTryGetMessage, prop_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::PropGetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::PropGetMessage, is_get_),
  PROTOBUF_FIELD_OFFSET(::message::PropGetMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::PropGetMessage, prop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::IntegerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::IntegerMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::message::IntegerMessage, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::Gate, gate_direction_),
  PROTOBUF_FIELD_OFFSET(::message::Gate, gate_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::GateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::GateMessage, gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::EnterGateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::EnterGateMessage, gate_direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::EnterGateResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::EnterGateResultMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::message::EnterGateResultMessage, gate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::PlayerResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::PlayerResultMessage, player_result_),
  PROTOBUF_FIELD_OFFSET(::message::PlayerResultMessage, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::GameResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::GameResultMessage, game_result_),
  PROTOBUF_FIELD_OFFSET(::message::GameResultMessage, player_result_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::ChatMessage, from_player_id_),
  PROTOBUF_FIELD_OFFSET(::message::ChatMessage, is_to_all_),
  PROTOBUF_FIELD_OFFSET(::message::ChatMessage, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::HelloMessage)},
  { 7, -1, -1, sizeof(::message::Character)},
  { 15, -1, -1, sizeof(::message::MessageWrapper)},
  { 35, -1, -1, sizeof(::message::RoomMessage)},
  { 45, -1, -1, sizeof(::message::StringMessage)},
  { 53, -1, -1, sizeof(::message::LobbyMessage)},
  { 62, -1, -1, sizeof(::message::StartReceiveMsgMessage)},
  { 69, -1, -1, sizeof(::message::PlayerBasicMessage)},
  { 83, -1, -1, sizeof(::message::PropTryGetMessage)},
  { 92, -1, -1, sizeof(::message::PropGetMessage)},
  { 101, -1, -1, sizeof(::message::IntegerMessage)},
  { 109, -1, -1, sizeof(::message::Gate)},
  { 117, -1, -1, sizeof(::message::GateMessage)},
  { 124, -1, -1, sizeof(::message::EnterGateMessage)},
  { 131, -1, -1, sizeof(::message::EnterGateResultMessage)},
  { 139, -1, -1, sizeof(::message::PlayerResultMessage)},
  { 147, -1, -1, sizeof(::message::GameResultMessage)},
  { 155, -1, -1, sizeof(::message::ChatMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_HelloMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Character_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_MessageWrapper_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_RoomMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_StringMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_LobbyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_StartReceiveMsgMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_PlayerBasicMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_PropTryGetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_PropGetMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_IntegerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Gate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_GateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_EnterGateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_EnterGateResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_PlayerResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_GameResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_ChatMessage_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007message\"\037\n\014HelloMessage"
  "\022\017\n\007room_id\030\001 \001(\005\"N\n\tCharacter\022\021\n\tplayer"
  "_id\030\001 \001(\005\022.\n\016character_type\030\002 \001(\0162\026.mess"
  "age.CharacterType\"\351\005\n\016MessageWrapper\022,\n\014"
  "room_message\030\001 \001(\0132\024.message.RoomMessage"
  "H\000\0220\n\016string_message\030\002 \001(\0132\026.message.Str"
  "ingMessageH\000\022.\n\rlobby_message\030\003 \001(\0132\025.me"
  "ssage.LobbyMessageH\000\022D\n\031start_receive_ms"
  "g_message\030\004 \001(\0132\037.message.StartReceiveMs"
  "gMessageH\000\022;\n\024player_basic_message\030\005 \001(\013"
  "2\033.message.PlayerBasicMessageH\000\022:\n\024prop_"
  "try_get_message\030\006 \001(\0132\032.message.PropTryG"
  "etMessageH\000\0223\n\020prop_get_message\030\007 \001(\0132\027."
  "message.PropGetMessageH\000\0222\n\017integer_mess"
  "age\030\010 \001(\0132\027.message.IntegerMessageH\000\022,\n\014"
  "gate_message\030\t \001(\0132\024.message.GateMessage"
  "H\000\0227\n\022enter_gate_message\030\n \001(\0132\031.message"
  ".EnterGateMessageH\000\022D\n\031enter_gate_result"
  "_message\030\013 \001(\0132\037.message.EnterGateResult"
  "MessageH\000\0229\n\023game_result_message\030\014 \001(\0132\032"
  ".message.GameResultMessageH\000\022,\n\014chat_mes"
  "sage\030\r \001(\0132\024.message.ChatMessageH\000B\t\n\007pa"
  "yload\"j\n\013RoomMessage\022\017\n\007is_join\030\001 \001(\010\022\017\n"
  "\007room_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\022&\n\ncha"
  "racters\030\004 \003(\0132\022.message.Character\">\n\rStr"
  "ingMessage\022\024\n\014message_type\030\001 \001(\005\022\027\n\017mess"
  "age_content\030\002 \001(\t\"c\n\014LobbyMessage\022\020\n\010is_"
  "ready\030\001 \001(\010\022\021\n\tplayer_id\030\002 \001(\005\022.\n\016charac"
  "ter_type\030\003 \001(\0162\026.message.CharacterType\"+"
  "\n\026StartReceiveMsgMessage\022\021\n\tplayer_id\030\001 "
  "\001(\005\"\347\001\n\022PlayerBasicMessage\022\021\n\tplayer_id\030"
  "\001 \001(\005\022\022\n\nposition_x\030\002 \001(\002\022\022\n\nposition_y\030"
  "\003 \001(\002\022\n\n\002hp\030\004 \001(\002\022\016\n\006max_hp\030\005 \001(\002\022\022\n\nwea"
  "k_timer\030\006 \001(\002\0224\n\016animation_type\030\007 \001(\0162\034."
  "message.PlayerAnimationType\0220\n\017character"
  "_state\030\010 \001(\0162\027.message.CharacterState\"J\n"
  "\021PropTryGetMessage\022\021\n\tplayer_id\030\001 \001(\005\022\017\n"
  "\007prop_id\030\002 \001(\005\022\021\n\tprop_type\030\003 \001(\005\"D\n\016Pro"
  "pGetMessage\022\016\n\006is_get\030\001 \001(\010\022\021\n\tplayer_id"
  "\030\002 \001(\005\022\017\n\007prop_id\030\003 \001(\005\"R\n\016IntegerMessag"
  "e\0221\n\014message_type\030\001 \001(\0162\033.message.Intege"
  "rMessageType\022\r\n\005value\030\002 \001(\005\"\\\n\004Gate\022.\n\016g"
  "ate_direction\030\001 \001(\0162\026.message.GateDirect"
  "ion\022$\n\tgate_type\030\002 \001(\0162\021.message.GateTyp"
  "e\"+\n\013GateMessage\022\034\n\005gates\030\001 \003(\0132\r.messag"
  "e.Gate\"B\n\020EnterGateMessage\022.\n\016gate_direc"
  "tion\030\002 \001(\0162\026.message.GateDirection\"H\n\026En"
  "terGateResultMessage\022\021\n\tplayer_id\030\001 \001(\005\022"
  "\033\n\004gate\030\002 \001(\0132\r.message.Gate\"V\n\023PlayerRe"
  "sultMessage\022,\n\rplayer_result\030\001 \001(\0162\025.mes"
  "sage.PlayerResult\022\021\n\tplayer_id\030\002 \001(\005\"{\n\021"
  "GameResultMessage\022(\n\013game_result\030\001 \001(\0162\023"
  ".message.GameResult\022<\n\026player_result_mes"
  "sages\030\002 \003(\0132\034.message.PlayerResultMessag"
  "e\"I\n\013ChatMessage\022\026\n\016from_player_id\030\001 \001(\005"
  "\022\021\n\tis_to_all\030\002 \001(\010\022\017\n\007content\030\003 \001(\t*T\n\r"
  "CharacterType\022\n\n\006REAPER\020\000\022\014\n\010SOUL_DOG\020\001\022"
  "\025\n\021SOUL_PSYCHOLOGIST\020\002\022\022\n\016SOUL_DETECTIVE"
  "\020\003*!\n\021StringMessageType\022\014\n\010MAZE_MAP\020\000*\205\001"
  "\n\023PlayerAnimationType\022\010\n\004IDLE\020\000\022\r\n\tWALK_"
  "LEFT\020\001\022\016\n\nWALK_RIGHT\020\002\022\r\n\tDASH_LEFT\020\003\022\016\n"
  "\nDASH_RIGHT\020\004\022\n\n\006ATTACK\020\005\022\007\n\003HIT\020\006\022\010\n\004WE"
  "AK\020\007\022\007\n\003DIE\020\010*{\n\016CharacterState\022\032\n\026Chara"
  "cter_STATE_NORMAL\020\000\022\030\n\024Character_STATE_W"
  "EAK\020\001\022\027\n\023Character_STATE_DIE\020\002\022\032\n\026Charac"
  "ter_STATE_FREEZE\020\003*K\n\022IntegerMessageType"
  "\022\033\n\027ALTAR_MINI_GAME_SUCCESS\020\000\022\030\n\024REAPER_"
  "ATTACK_RESULT\020\001**\n\010GateType\022\017\n\013GATE_HEAV"
  "EN\020\000\022\r\n\tGATE_HELL\020\001*r\n\rGateDirection\022\025\n\021"
  "GATE_DIRECTION_UP\020\000\022\027\n\023GATE_DIRECTION_DO"
  "WN\020\001\022\027\n\023GATE_DIRECTION_LEFT\020\002\022\030\n\024GATE_DI"
  "RECTION_RIGHT\020\003*W\n\nGameResult\022\023\n\017GAME_RE"
  "SULT_TIE\020\000\022\032\n\026GAME_RESULT_REAPER_WIN\020\001\022\030"
  "\n\024GAME_RESULT_SOUL_WIN\020\002*\234\001\n\014PlayerResul"
  "t\022\034\n\030PLAYER_RESULT_DIE_BY_HIT\020\000\022\026\n\022PLAYE"
  "R_RESULT_HELL\020\001\022\030\n\024PLAYER_RESULT_HEAVEN\020"
  "\002\022\036\n\032PLAYER_RESULT_REAPER_HAPPY\020\003\022\034\n\030PLA"
  "YER_RESULT_REAPER_SAD\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 3111, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool CharacterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StringMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool StringMessageType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerAnimationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool PlayerAnimationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool CharacterState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegerMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[4];
}
bool IntegerMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[5];
}
bool GateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GateDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[6];
}
bool GateDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[7];
}
bool GameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[8];
}
bool PlayerResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HelloMessage::_Internal {
 public:
};

HelloMessage::HelloMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:message.HelloMessage)
}

inline void HelloMessage::SharedCtor() {
room_id_ = 0;
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:message.HelloMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HelloMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HelloMessage::ArenaDtor(void* object) {
  HelloMessage* _this = reinterpret_cast< HelloMessage* >(object);
  (void)_this;
}
void HelloMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.HelloMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.HelloMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.HelloMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HelloMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloMessage::GetClassData() const { return &_class_data_; }

void HelloMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HelloMessage *>(to)->MergeFrom(
      static_cast<const HelloMessage &>(from));
}


void HelloMessage::MergeFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::InternalSwap(HelloMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(room_id_, other->room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class Character::_Internal {
 public:
};

Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(character_type_));
  // @@protoc_insertion_point(copy_constructor:message.Character)
}

inline void Character::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(character_type_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:message.Character)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Character::ArenaDtor(void* object) {
  Character* _this = reinterpret_cast< Character* >(object);
  (void)_this;
}
void Character::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Character)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(character_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.CharacterType character_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_type(static_cast<::message::CharacterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Character::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Character)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .message.CharacterType character_type = 2;
  if (this->_internal_character_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_character_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Character)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // .message.CharacterType character_type = 2;
  if (this->_internal_character_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_character_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Character::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character::GetClassData() const { return &_class_data_; }

void Character::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Character *>(to)->MergeFrom(
      static_cast<const Character &>(from));
}


void Character::MergeFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Character)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_character_type() != 0) {
    _internal_set_character_type(from._internal_character_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, character_type_)
      + sizeof(Character::character_type_)
      - PROTOBUF_FIELD_OFFSET(Character, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class MessageWrapper::_Internal {
 public:
  static const ::message::RoomMessage& room_message(const MessageWrapper* msg);
  static const ::message::StringMessage& string_message(const MessageWrapper* msg);
  static const ::message::LobbyMessage& lobby_message(const MessageWrapper* msg);
  static const ::message::StartReceiveMsgMessage& start_receive_msg_message(const MessageWrapper* msg);
  static const ::message::PlayerBasicMessage& player_basic_message(const MessageWrapper* msg);
  static const ::message::PropTryGetMessage& prop_try_get_message(const MessageWrapper* msg);
  static const ::message::PropGetMessage& prop_get_message(const MessageWrapper* msg);
  static const ::message::IntegerMessage& integer_message(const MessageWrapper* msg);
  static const ::message::GateMessage& gate_message(const MessageWrapper* msg);
  static const ::message::EnterGateMessage& enter_gate_message(const MessageWrapper* msg);
  static const ::message::EnterGateResultMessage& enter_gate_result_message(const MessageWrapper* msg);
  static const ::message::GameResultMessage& game_result_message(const MessageWrapper* msg);
  static const ::message::ChatMessage& chat_message(const MessageWrapper* msg);
};

const ::message::RoomMessage&
MessageWrapper::_Internal::room_message(const MessageWrapper* msg) {
  return *msg->payload_.room_message_;
}
const ::message::StringMessage&
MessageWrapper::_Internal::string_message(const MessageWrapper* msg) {
  return *msg->payload_.string_message_;
}
const ::message::LobbyMessage&
MessageWrapper::_Internal::lobby_message(const MessageWrapper* msg) {
  return *msg->payload_.lobby_message_;
}
const ::message::StartReceiveMsgMessage&
MessageWrapper::_Internal::start_receive_msg_message(const MessageWrapper* msg) {
  return *msg->payload_.start_receive_msg_message_;
}
const ::message::PlayerBasicMessage&
MessageWrapper::_Internal::player_basic_message(const MessageWrapper* msg) {
  return *msg->payload_.player_basic_message_;
}
const ::message::PropTryGetMessage&
MessageWrapper::_Internal::prop_try_get_message(const MessageWrapper* msg) {
  return *msg->payload_.prop_try_get_message_;
}
const ::message::PropGetMessage&
MessageWrapper::_Internal::prop_get_message(const MessageWrapper* msg) {
  return *msg->payload_.prop_get_message_;
}
const ::message::IntegerMessage&
MessageWrapper::_Internal::integer_message(const MessageWrapper* msg) {
  return *msg->payload_.integer_message_;
}
const ::message::GateMessage&
MessageWrapper::_Internal::gate_message(const MessageWrapper* msg) {
  return *msg->payload_.gate_message_;
}
const ::message::EnterGateMessage&
MessageWrapper::_Internal::enter_gate_message(const MessageWrapper* msg) {
  return *msg->payload_.enter_gate_message_;
}
const ::message::EnterGateResultMessage&
MessageWrapper::_Internal::enter_gate_result_message(const MessageWrapper* msg) {
  return *msg->payload_.enter_gate_result_message_;
}
const ::message::GameResultMessage&
MessageWrapper::_Internal::game_result_message(const MessageWrapper* msg) {
  return *msg->payload_.game_result_message_;
}
const ::message::ChatMessage&
MessageWrapper::_Internal::chat_message(const MessageWrapper* msg) {
  return *msg->payload_.chat_message_;
}
void MessageWrapper::set_allocated_room_message(::message::RoomMessage* room_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (room_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::RoomMessage>::GetOwningArena(room_message);
    if (message_arena != submessage_arena) {
      room_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_message, submessage_arena);
    }
    set_has_room_message();
    payload_.room_message_ = room_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.room_message)
}
void MessageWrapper::set_allocated_string_message(::message::StringMessage* string_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (string_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::StringMessage>::GetOwningArena(string_message);
    if (message_arena != submessage_arena) {
      string_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_message, submessage_arena);
    }
    set_has_string_message();
    payload_.string_message_ = string_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.string_message)
}
void MessageWrapper::set_allocated_lobby_message(::message::LobbyMessage* lobby_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (lobby_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::LobbyMessage>::GetOwningArena(lobby_message);
    if (message_arena != submessage_arena) {
      lobby_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobby_message, submessage_arena);
    }
    set_has_lobby_message();
    payload_.lobby_message_ = lobby_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.lobby_message)
}
void MessageWrapper::set_allocated_start_receive_msg_message(::message::StartReceiveMsgMessage* start_receive_msg_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (start_receive_msg_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::StartReceiveMsgMessage>::GetOwningArena(start_receive_msg_message);
    if (message_arena != submessage_arena) {
      start_receive_msg_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_receive_msg_message, submessage_arena);
    }
    set_has_start_receive_msg_message();
    payload_.start_receive_msg_message_ = start_receive_msg_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.start_receive_msg_message)
}
void MessageWrapper::set_allocated_player_basic_message(::message::PlayerBasicMessage* player_basic_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (player_basic_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::PlayerBasicMessage>::GetOwningArena(player_basic_message);
    if (message_arena != submessage_arena) {
      player_basic_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_basic_message, submessage_arena);
    }
    set_has_player_basic_message();
    payload_.player_basic_message_ = player_basic_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.player_basic_message)
}
void MessageWrapper::set_allocated_prop_try_get_message(::message::PropTryGetMessage* prop_try_get_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (prop_try_get_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::PropTryGetMessage>::GetOwningArena(prop_try_get_message);
    if (message_arena != submessage_arena) {
      prop_try_get_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop_try_get_message, submessage_arena);
    }
    set_has_prop_try_get_message();
    payload_.prop_try_get_message_ = prop_try_get_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.prop_try_get_message)
}
void MessageWrapper::set_allocated_prop_get_message(::message::PropGetMessage* prop_get_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (prop_get_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::PropGetMessage>::GetOwningArena(prop_get_message);
    if (message_arena != submessage_arena) {
      prop_get_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prop_get_message, submessage_arena);
    }
    set_has_prop_get_message();
    payload_.prop_get_message_ = prop_get_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.prop_get_message)
}
void MessageWrapper::set_allocated_integer_message(::message::IntegerMessage* integer_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (integer_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::IntegerMessage>::GetOwningArena(integer_message);
    if (message_arena != submessage_arena) {
      integer_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer_message, submessage_arena);
    }
    set_has_integer_message();
    payload_.integer_message_ = integer_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.integer_message)
}
void MessageWrapper::set_allocated_gate_message(::message::GateMessage* gate_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (gate_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::GateMessage>::GetOwningArena(gate_message);
    if (message_arena != submessage_arena) {
      gate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gate_message, submessage_arena);
    }
    set_has_gate_message();
    payload_.gate_message_ = gate_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.gate_message)
}
void MessageWrapper::set_allocated_enter_gate_message(::message::EnterGateMessage* enter_gate_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (enter_gate_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::EnterGateMessage>::GetOwningArena(enter_gate_message);
    if (message_arena != submessage_arena) {
      enter_gate_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enter_gate_message, submessage_arena);
    }
    set_has_enter_gate_message();
    payload_.enter_gate_message_ = enter_gate_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.enter_gate_message)
}
void MessageWrapper::set_allocated_enter_gate_result_message(::message::EnterGateResultMessage* enter_gate_result_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (enter_gate_result_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::EnterGateResultMessage>::GetOwningArena(enter_gate_result_message);
    if (message_arena != submessage_arena) {
      enter_gate_result_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enter_gate_result_message, submessage_arena);
    }
    set_has_enter_gate_result_message();
    payload_.enter_gate_result_message_ = enter_gate_result_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.enter_gate_result_message)
}
void MessageWrapper::set_allocated_game_result_message(::message::GameResultMessage* game_result_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (game_result_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::GameResultMessage>::GetOwningArena(game_result_message);
    if (message_arena != submessage_arena) {
      game_result_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_result_message, submessage_arena);
    }
    set_has_game_result_message();
    payload_.game_result_message_ = game_result_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.game_result_message)
}
void MessageWrapper::set_allocated_chat_message(::message::ChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::message::ChatMessage>::GetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    payload_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:message.MessageWrapper.chat_message)
}
MessageWrapper::MessageWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.MessageWrapper)
}
MessageWrapper::MessageWrapper(const MessageWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kRoomMessage: {
      _internal_mutable_room_message()->::message::RoomMessage::MergeFrom(from._internal_room_message());
      break;
    }
    case kStringMessage: {
      _internal_mutable_string_message()->::message::StringMessage::MergeFrom(from._internal_string_message());
      break;
    }
    case kLobbyMessage: {
      _internal_mutable_lobby_message()->::message::LobbyMessage::MergeFrom(from._internal_lobby_message());
      break;
    }
    case kStartReceiveMsgMessage: {
      _internal_mutable_start_receive_msg_message()->::message::StartReceiveMsgMessage::MergeFrom(from._internal_start_receive_msg_message());
      break;
    }
    case kPlayerBasicMessage: {
      _internal_mutable_player_basic_message()->::message::PlayerBasicMessage::MergeFrom(from._internal_player_basic_message());
      break;
    }
    case kPropTryGetMessage: {
      _internal_mutable_prop_try_get_message()->::message::PropTryGetMessage::MergeFrom(from._internal_prop_try_get_message());
      break;
    }
    case kPropGetMessage: {
      _internal_mutable_prop_get_message()->::message::PropGetMessage::MergeFrom(from._internal_prop_get_message());
      break;
    }
    case kIntegerMessage: {
      _internal_mutable_integer_message()->::message::IntegerMessage::MergeFrom(from._internal_integer_message());
      break;
    }
    case kGateMessage: {
      _internal_mutable_gate_message()->::message::GateMessage::MergeFrom(from._internal_gate_message());
      break;
    }
    case kEnterGateMessage: {
      _internal_mutable_enter_gate_message()->::message::EnterGateMessage::MergeFrom(from._internal_enter_gate_message());
      break;
    }
    case kEnterGateResultMessage: {
      _internal_mutable_enter_gate_result_message()->::message::EnterGateResultMessage::MergeFrom(from._internal_enter_gate_result_message());
      break;
    }
    case kGameResultMessage: {
      _internal_mutable_game_result_message()->::message::GameResultMessage::MergeFrom(from._internal_game_result_message());
      break;
    }
    case kChatMessage: {
      _internal_mutable_chat_message()->::message::ChatMessage::MergeFrom(from._internal_chat_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.MessageWrapper)
}

inline void MessageWrapper::SharedCtor() {
clear_has_payload();
}

MessageWrapper::~MessageWrapper() {
  // @@protoc_insertion_point(destructor:message.MessageWrapper)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void MessageWrapper::ArenaDtor(void* object) {
  MessageWrapper* _this = reinterpret_cast< MessageWrapper* >(object);
  (void)_this;
}
void MessageWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageWrapper::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:message.MessageWrapper)
  switch (payload_case()) {
    case kRoomMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.room_message_;
      }
      break;
    }
    case kStringMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.string_message_;
      }
      break;
    }
    case kLobbyMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.lobby_message_;
      }
      break;
    }
    case kStartReceiveMsgMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.start_receive_msg_message_;
      }
      break;
    }
    case kPlayerBasicMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.player_basic_message_;
      }
      break;
    }
    case kPropTryGetMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.prop_try_get_message_;
      }
      break;
    }
    case kPropGetMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.prop_get_message_;
      }
      break;
    }
    case kIntegerMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.integer_message_;
      }
      break;
    }
    case kGateMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.gate_message_;
      }
      break;
    }
    case kEnterGateMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.enter_gate_message_;
      }
      break;
    }
    case kEnterGateResultMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.enter_gate_result_message_;
      }
      break;
    }
    case kGameResultMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.game_result_message_;
      }
      break;
    }
    case kChatMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.chat_message_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MessageWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:message.MessageWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.RoomMessage room_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.StringMessage string_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.LobbyMessage lobby_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobby_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.StartReceiveMsgMessage start_receive_msg_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_receive_msg_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.PlayerBasicMessage player_basic_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_basic_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.PropTryGetMessage prop_try_get_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop_try_get_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.PropGetMessage prop_get_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop_get_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.IntegerMessage integer_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.GateMessage gate_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gate_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.EnterGateMessage enter_gate_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_enter_gate_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.EnterGateResultMessage enter_gate_result_message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_enter_gate_result_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.GameResultMessage game_result_message = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_result_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.ChatMessage chat_message = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MessageWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.RoomMessage room_message = 1;
  if (_internal_has_room_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::room_message(this), target, stream);
  }

  // .message.StringMessage string_message = 2;
  if (_internal_has_string_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::string_message(this), target, stream);
  }

  // .message.LobbyMessage lobby_message = 3;
  if (_internal_has_lobby_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lobby_message(this), target, stream);
  }

  // .message.StartReceiveMsgMessage start_receive_msg_message = 4;
  if (_internal_has_start_receive_msg_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_receive_msg_message(this), target, stream);
  }

  // .message.PlayerBasicMessage player_basic_message = 5;
  if (_internal_has_player_basic_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_basic_message(this), target, stream);
  }

  // .message.PropTryGetMessage prop_try_get_message = 6;
  if (_internal_has_prop_try_get_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::prop_try_get_message(this), target, stream);
  }

  // .message.PropGetMessage prop_get_message = 7;
  if (_internal_has_prop_get_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::prop_get_message(this), target, stream);
  }

  // .message.IntegerMessage integer_message = 8;
  if (_internal_has_integer_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::integer_message(this), target, stream);
  }

  // .message.GateMessage gate_message = 9;
  if (_internal_has_gate_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gate_message(this), target, stream);
  }

  // .message.EnterGateMessage enter_gate_message = 10;
  if (_internal_has_enter_gate_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::enter_gate_message(this), target, stream);
  }

  // .message.EnterGateResultMessage enter_gate_result_message = 11;
  if (_internal_has_enter_gate_result_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::enter_gate_result_message(this), target, stream);
  }

  // .message.GameResultMessage game_result_message = 12;
  if (_internal_has_game_result_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::game_result_message(this), target, stream);
  }

  // .message.ChatMessage chat_message = 13;
  if (_internal_has_chat_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::chat_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MessageWrapper)
  return target;
}

size_t MessageWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.MessageWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .message.RoomMessage room_message = 1;
    case kRoomMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.room_message_);
      break;
    }
    // .message.StringMessage string_message = 2;
    case kStringMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.string_message_);
      break;
    }
    // .message.LobbyMessage lobby_message = 3;
    case kLobbyMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.lobby_message_);
      break;
    }
    // .message.StartReceiveMsgMessage start_receive_msg_message = 4;
    case kStartReceiveMsgMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.start_receive_msg_message_);
      break;
    }
    // .message.PlayerBasicMessage player_basic_message = 5;
    case kPlayerBasicMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.player_basic_message_);
      break;
    }
    // .message.PropTryGetMessage prop_try_get_message = 6;
    case kPropTryGetMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.prop_try_get_message_);
      break;
    }
    // .message.PropGetMessage prop_get_message = 7;
    case kPropGetMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.prop_get_message_);
      break;
    }
    // .message.IntegerMessage integer_message = 8;
    case kIntegerMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.integer_message_);
      break;
    }
    // .message.GateMessage gate_message = 9;
    case kGateMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gate_message_);
      break;
    }
    // .message.EnterGateMessage enter_gate_message = 10;
    case kEnterGateMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.enter_gate_message_);
      break;
    }
    // .message.EnterGateResultMessage enter_gate_result_message = 11;
    case kEnterGateResultMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.enter_gate_result_message_);
      break;
    }
    // .message.GameResultMessage game_result_message = 12;
    case kGameResultMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.game_result_message_);
      break;
    }
    // .message.ChatMessage chat_message = 13;
    case kChatMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.chat_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageWrapper::GetClassData() const { return &_class_data_; }

void MessageWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageWrapper *>(to)->MergeFrom(
      static_cast<const MessageWrapper &>(from));
}


void MessageWrapper::MergeFrom(const MessageWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.MessageWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kRoomMessage: {
      _internal_mutable_room_message()->::message::RoomMessage::MergeFrom(from._internal_room_message());
      break;
    }
    case kStringMessage: {
      _internal_mutable_string_message()->::message::StringMessage::MergeFrom(from._internal_string_message());
      break;
    }
    case kLobbyMessage: {
      _internal_mutable_lobby_message()->::message::LobbyMessage::MergeFrom(from._internal_lobby_message());
      break;
    }
    case kStartReceiveMsgMessage: {
      _internal_mutable_start_receive_msg_message()->::message::StartReceiveMsgMessage::MergeFrom(from._internal_start_receive_msg_message());
      break;
    }
    case kPlayerBasicMessage: {
      _internal_mutable_player_basic_message()->::message::PlayerBasicMessage::MergeFrom(from._internal_player_basic_message());
      break;
    }
    case kPropTryGetMessage: {
      _internal_mutable_prop_try_get_message()->::message::PropTryGetMessage::MergeFrom(from._internal_prop_try_get_message());
      break;
    }
    case kPropGetMessage: {
      _internal_mutable_prop_get_message()->::message::PropGetMessage::MergeFrom(from._internal_prop_get_message());
      break;
    }
    case kIntegerMessage: {
      _internal_mutable_integer_message()->::message::IntegerMessage::MergeFrom(from._internal_integer_message());
      break;
    }
    case kGateMessage: {
      _internal_mutable_gate_message()->::message::GateMessage::MergeFrom(from._internal_gate_message());
      break;
    }
    case kEnterGateMessage: {
      _internal_mutable_enter_gate_message()->::message::EnterGateMessage::MergeFrom(from._internal_enter_gate_message());
      break;
    }
    case kEnterGateResultMessage: {
      _internal_mutable_enter_gate_result_message()->::message::EnterGateResultMessage::MergeFrom(from._internal_enter_gate_result_message());
      break;
    }
    case kGameResultMessage: {
      _internal_mutable_game_result_message()->::message::GameResultMessage::MergeFrom(from._internal_game_result_message());
      break;
    }
    case kChatMessage: {
      _internal_mutable_chat_message()->::message::ChatMessage::MergeFrom(from._internal_chat_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.MessageWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageWrapper::IsInitialized() const {
  return true;
}

void MessageWrapper::InternalSwap(MessageWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageWrapper::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class RoomMessage::_Internal {
 public:
};

RoomMessage::RoomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  characters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.RoomMessage)
}
RoomMessage::RoomMessage(const RoomMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_join_, &from.is_join_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&is_join_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:message.RoomMessage)
}

inline void RoomMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_join_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&is_join_)) + sizeof(player_id_));
}

RoomMessage::~RoomMessage() {
  // @@protoc_insertion_point(destructor:message.RoomMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomMessage::ArenaDtor(void* object) {
  RoomMessage* _this = reinterpret_cast< RoomMessage* >(object);
  (void)_this;
}
void RoomMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoomMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  ::memset(&is_join_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&is_join_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_join = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.Character characters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoomMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_join = 1;
  if (this->_internal_is_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_join(), target);
  }

  // int32 room_id = 2;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_room_id(), target);
  }

  // int32 player_id = 3;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_id(), target);
  }

  // repeated .message.Character characters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoomMessage)
  return target;
}

size_t RoomMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoomMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.Character characters = 4;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_join = 1;
  if (this->_internal_is_join() != 0) {
    total_size += 1 + 1;
  }

  // int32 room_id = 2;
  if (this->_internal_room_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  // int32 player_id = 3;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomMessage::GetClassData() const { return &_class_data_; }

void RoomMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomMessage *>(to)->MergeFrom(
      static_cast<const RoomMessage &>(from));
}


void RoomMessage::MergeFrom(const RoomMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RoomMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
  if (from._internal_is_join() != 0) {
    _internal_set_is_join(from._internal_is_join());
  }
  if (from._internal_room_id() != 0) {
    _internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomMessage::CopyFrom(const RoomMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoomMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessage::IsInitialized() const {
  return true;
}

void RoomMessage::InternalSwap(RoomMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomMessage, player_id_)
      + sizeof(RoomMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(RoomMessage, is_join_)>(
          reinterpret_cast<char*>(&is_join_),
          reinterpret_cast<char*>(&other->is_join_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class StringMessage::_Internal {
 public:
};

StringMessage::StringMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.StringMessage)
}
StringMessage::StringMessage(const StringMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_content().empty()) {
    message_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_content(), 
      GetArenaForAllocation());
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:message.StringMessage)
}

inline void StringMessage::SharedCtor() {
message_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_type_ = 0;
}

StringMessage::~StringMessage() {
  // @@protoc_insertion_point(destructor:message.StringMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringMessage::ArenaDtor(void* object) {
  StringMessage* _this = reinterpret_cast< StringMessage* >(object);
  (void)_this;
}
void StringMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.StringMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_content_.ClearToEmpty();
  message_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.StringMessage.message_content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.StringMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_message_type(), target);
  }

  // string message_content = 2;
  if (!this->_internal_message_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_content().data(), static_cast<int>(this->_internal_message_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.StringMessage.message_content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.StringMessage)
  return target;
}

size_t StringMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.StringMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_content = 2;
  if (!this->_internal_message_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_content());
  }

  // int32 message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_message_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringMessage::GetClassData() const { return &_class_data_; }

void StringMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringMessage *>(to)->MergeFrom(
      static_cast<const StringMessage &>(from));
}


void StringMessage::MergeFrom(const StringMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.StringMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_content().empty()) {
    _internal_set_message_content(from._internal_message_content());
  }
  if (from._internal_message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringMessage::CopyFrom(const StringMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.StringMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMessage::IsInitialized() const {
  return true;
}

void StringMessage::InternalSwap(StringMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_content_, lhs_arena,
      &other->message_content_, rhs_arena
  );
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class LobbyMessage::_Internal {
 public:
};

LobbyMessage::LobbyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.LobbyMessage)
}
LobbyMessage::LobbyMessage(const LobbyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_ready_, &from.is_ready_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_type_) -
    reinterpret_cast<char*>(&is_ready_)) + sizeof(character_type_));
  // @@protoc_insertion_point(copy_constructor:message.LobbyMessage)
}

inline void LobbyMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_ready_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_type_) -
    reinterpret_cast<char*>(&is_ready_)) + sizeof(character_type_));
}

LobbyMessage::~LobbyMessage() {
  // @@protoc_insertion_point(destructor:message.LobbyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LobbyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LobbyMessage::ArenaDtor(void* object) {
  LobbyMessage* _this = reinterpret_cast< LobbyMessage* >(object);
  (void)_this;
}
void LobbyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LobbyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LobbyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.LobbyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_ready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_type_) -
      reinterpret_cast<char*>(&is_ready_)) + sizeof(character_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobbyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.CharacterType character_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_type(static_cast<::message::CharacterType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobbyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.LobbyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 1;
  if (this->_internal_is_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_ready(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // .message.CharacterType character_type = 3;
  if (this->_internal_character_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_character_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.LobbyMessage)
  return target;
}

size_t LobbyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.LobbyMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_ready = 1;
  if (this->_internal_is_ready() != 0) {
    total_size += 1 + 1;
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // .message.CharacterType character_type = 3;
  if (this->_internal_character_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_character_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobbyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LobbyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobbyMessage::GetClassData() const { return &_class_data_; }

void LobbyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LobbyMessage *>(to)->MergeFrom(
      static_cast<const LobbyMessage &>(from));
}


void LobbyMessage::MergeFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.LobbyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_ready() != 0) {
    _internal_set_is_ready(from._internal_is_ready());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_character_type() != 0) {
    _internal_set_character_type(from._internal_character_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobbyMessage::CopyFrom(const LobbyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.LobbyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyMessage::IsInitialized() const {
  return true;
}

void LobbyMessage::InternalSwap(LobbyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobbyMessage, character_type_)
      + sizeof(LobbyMessage::character_type_)
      - PROTOBUF_FIELD_OFFSET(LobbyMessage, is_ready_)>(
          reinterpret_cast<char*>(&is_ready_),
          reinterpret_cast<char*>(&other->is_ready_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobbyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class StartReceiveMsgMessage::_Internal {
 public:
};

StartReceiveMsgMessage::StartReceiveMsgMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.StartReceiveMsgMessage)
}
StartReceiveMsgMessage::StartReceiveMsgMessage(const StartReceiveMsgMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:message.StartReceiveMsgMessage)
}

inline void StartReceiveMsgMessage::SharedCtor() {
player_id_ = 0;
}

StartReceiveMsgMessage::~StartReceiveMsgMessage() {
  // @@protoc_insertion_point(destructor:message.StartReceiveMsgMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartReceiveMsgMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartReceiveMsgMessage::ArenaDtor(void* object) {
  StartReceiveMsgMessage* _this = reinterpret_cast< StartReceiveMsgMessage* >(object);
  (void)_this;
}
void StartReceiveMsgMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartReceiveMsgMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartReceiveMsgMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.StartReceiveMsgMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartReceiveMsgMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartReceiveMsgMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.StartReceiveMsgMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.StartReceiveMsgMessage)
  return target;
}

size_t StartReceiveMsgMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.StartReceiveMsgMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartReceiveMsgMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartReceiveMsgMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartReceiveMsgMessage::GetClassData() const { return &_class_data_; }

void StartReceiveMsgMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartReceiveMsgMessage *>(to)->MergeFrom(
      static_cast<const StartReceiveMsgMessage &>(from));
}


void StartReceiveMsgMessage::MergeFrom(const StartReceiveMsgMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.StartReceiveMsgMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartReceiveMsgMessage::CopyFrom(const StartReceiveMsgMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.StartReceiveMsgMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReceiveMsgMessage::IsInitialized() const {
  return true;
}

void StartReceiveMsgMessage::InternalSwap(StartReceiveMsgMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartReceiveMsgMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// ===================================================================

class PlayerBasicMessage::_Internal {
 public:
};

PlayerBasicMessage::PlayerBasicMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.PlayerBasicMessage)
}
PlayerBasicMessage::PlayerBasicMessage(const PlayerBasicMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_state_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(character_state_));
  // @@protoc_insertion_point(copy_constructor:message.PlayerBasicMessage)
}

inline void PlayerBasicMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_state_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(character_state_));
}

PlayerBasicMessage::~PlayerBasicMessage() {
  // @@protoc_insertion_point(destructor:message.PlayerBasicMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerBasicMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerBasicMessage::ArenaDtor(void* object) {
  PlayerBasicMessage* _this = reinterpret_cast< PlayerBasicMessage* >(object);
  (void)_this;
}
void PlayerBasicMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerBasicMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerBasicMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PlayerBasicMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_state_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(character_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerBasicMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float max_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float weak_timer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          weak_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .message.PlayerAnimationType animation_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_animation_type(static_cast<::message::PlayerAnimationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.CharacterState character_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_character_state(static_cast<::message::CharacterState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerBasicMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerBasicMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_position_x(), target);
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_position_y(), target);
  }

  // float hp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_hp(), target);
  }

  // float max_hp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_hp = this->_internal_max_hp();
  uint32_t raw_max_hp;
  memcpy(&raw_max_hp, &tmp_max_hp, sizeof(tmp_max_hp));
  if (raw_max_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_hp(), target);
  }

  // float weak_timer = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weak_timer = this->_internal_weak_timer();
  uint32_t raw_weak_timer;
  memcpy(&raw_weak_timer, &tmp_weak_timer, sizeof(tmp_weak_timer));
  if (raw_weak_timer != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_weak_timer(), target);
  }

  // .message.PlayerAnimationType animation_type = 7;
  if (this->_internal_animation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_animation_type(), target);
  }

  // .message.CharacterState character_state = 8;
  if (this->_internal_character_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_character_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerBasicMessage)
  return target;
}

size_t PlayerBasicMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PlayerBasicMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    total_size += 1 + 4;
  }

  // float hp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = this->_internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 4;
  }

  // float max_hp = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_hp = this->_internal_max_hp();
  uint32_t raw_max_hp;
  memcpy(&raw_max_hp, &tmp_max_hp, sizeof(tmp_max_hp));
  if (raw_max_hp != 0) {
    total_size += 1 + 4;
  }

  // float weak_timer = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weak_timer = this->_internal_weak_timer();
  uint32_t raw_weak_timer;
  memcpy(&raw_weak_timer, &tmp_weak_timer, sizeof(tmp_weak_timer));
  if (raw_weak_timer != 0) {
    total_size += 1 + 4;
  }

  // .message.PlayerAnimationType animation_type = 7;
  if (this->_internal_animation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_animation_type());
  }

  // .message.CharacterState character_state = 8;
  if (this->_internal_character_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_character_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerBasicMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerBasicMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerBasicMessage::GetClassData() const { return &_class_data_; }

void PlayerBasicMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerBasicMessage *>(to)->MergeFrom(
      static_cast<const PlayerBasicMessage &>(from));
}


void PlayerBasicMessage::MergeFrom(const PlayerBasicMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PlayerBasicMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = from._internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    _internal_set_position_y(from._internal_position_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hp = from._internal_hp();
  uint32_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_hp = from._internal_max_hp();
  uint32_t raw_max_hp;
  memcpy(&raw_max_hp, &tmp_max_hp, sizeof(tmp_max_hp));
  if (raw_max_hp != 0) {
    _internal_set_max_hp(from._internal_max_hp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weak_timer = from._internal_weak_timer();
  uint32_t raw_weak_timer;
  memcpy(&raw_weak_timer, &tmp_weak_timer, sizeof(tmp_weak_timer));
  if (raw_weak_timer != 0) {
    _internal_set_weak_timer(from._internal_weak_timer());
  }
  if (from._internal_animation_type() != 0) {
    _internal_set_animation_type(from._internal_animation_type());
  }
  if (from._internal_character_state() != 0) {
    _internal_set_character_state(from._internal_character_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerBasicMessage::CopyFrom(const PlayerBasicMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PlayerBasicMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBasicMessage::IsInitialized() const {
  return true;
}

void PlayerBasicMessage::InternalSwap(PlayerBasicMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerBasicMessage, character_state_)
      + sizeof(PlayerBasicMessage::character_state_)
      - PROTOBUF_FIELD_OFFSET(PlayerBasicMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerBasicMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[7]);
}

// ===================================================================

class PropTryGetMessage::_Internal {
 public:
};

PropTryGetMessage::PropTryGetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.PropTryGetMessage)
}
PropTryGetMessage::PropTryGetMessage(const PropTryGetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prop_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(prop_type_));
  // @@protoc_insertion_point(copy_constructor:message.PropTryGetMessage)
}

inline void PropTryGetMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prop_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(prop_type_));
}

PropTryGetMessage::~PropTryGetMessage() {
  // @@protoc_insertion_point(destructor:message.PropTryGetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PropTryGetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PropTryGetMessage::ArenaDtor(void* object) {
  PropTryGetMessage* _this = reinterpret_cast< PropTryGetMessage* >(object);
  (void)_this;
}
void PropTryGetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropTryGetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropTryGetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PropTryGetMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(prop_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropTryGetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prop_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prop_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropTryGetMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PropTryGetMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 prop_id = 2;
  if (this->_internal_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prop_id(), target);
  }

  // int32 prop_type = 3;
  if (this->_internal_prop_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prop_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PropTryGetMessage)
  return target;
}

size_t PropTryGetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PropTryGetMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 prop_id = 2;
  if (this->_internal_prop_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prop_id());
  }

  // int32 prop_type = 3;
  if (this->_internal_prop_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prop_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropTryGetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PropTryGetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropTryGetMessage::GetClassData() const { return &_class_data_; }

void PropTryGetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PropTryGetMessage *>(to)->MergeFrom(
      static_cast<const PropTryGetMessage &>(from));
}


void PropTryGetMessage::MergeFrom(const PropTryGetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PropTryGetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  if (from._internal_prop_type() != 0) {
    _internal_set_prop_type(from._internal_prop_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropTryGetMessage::CopyFrom(const PropTryGetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PropTryGetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropTryGetMessage::IsInitialized() const {
  return true;
}

void PropTryGetMessage::InternalSwap(PropTryGetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropTryGetMessage, prop_type_)
      + sizeof(PropTryGetMessage::prop_type_)
      - PROTOBUF_FIELD_OFFSET(PropTryGetMessage, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropTryGetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[8]);
}

// ===================================================================

class PropGetMessage::_Internal {
 public:
};

PropGetMessage::PropGetMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.PropGetMessage)
}
PropGetMessage::PropGetMessage(const PropGetMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_get_, &from.is_get_,
    static_cast<size_t>(reinterpret_cast<char*>(&prop_id_) -
    reinterpret_cast<char*>(&is_get_)) + sizeof(prop_id_));
  // @@protoc_insertion_point(copy_constructor:message.PropGetMessage)
}

inline void PropGetMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_get_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prop_id_) -
    reinterpret_cast<char*>(&is_get_)) + sizeof(prop_id_));
}

PropGetMessage::~PropGetMessage() {
  // @@protoc_insertion_point(destructor:message.PropGetMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PropGetMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PropGetMessage::ArenaDtor(void* object) {
  PropGetMessage* _this = reinterpret_cast< PropGetMessage* >(object);
  (void)_this;
}
void PropGetMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropGetMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropGetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PropGetMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_get_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prop_id_) -
      reinterpret_cast<char*>(&is_get_)) + sizeof(prop_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropGetMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_get = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_get_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prop_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          prop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropGetMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PropGetMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_get = 1;
  if (this->_internal_is_get() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_get(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // int32 prop_id = 3;
  if (this->_internal_prop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PropGetMessage)
  return target;
}

size_t PropGetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PropGetMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_get = 1;
  if (this->_internal_is_get() != 0) {
    total_size += 1 + 1;
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 prop_id = 3;
  if (this->_internal_prop_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_prop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropGetMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PropGetMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropGetMessage::GetClassData() const { return &_class_data_; }

void PropGetMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PropGetMessage *>(to)->MergeFrom(
      static_cast<const PropGetMessage &>(from));
}


void PropGetMessage::MergeFrom(const PropGetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PropGetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_get() != 0) {
    _internal_set_is_get(from._internal_is_get());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_prop_id() != 0) {
    _internal_set_prop_id(from._internal_prop_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropGetMessage::CopyFrom(const PropGetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PropGetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropGetMessage::IsInitialized() const {
  return true;
}

void PropGetMessage::InternalSwap(PropGetMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropGetMessage, prop_id_)
      + sizeof(PropGetMessage::prop_id_)
      - PROTOBUF_FIELD_OFFSET(PropGetMessage, is_get_)>(
          reinterpret_cast<char*>(&is_get_),
          reinterpret_cast<char*>(&other->is_get_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropGetMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[9]);
}

// ===================================================================

class IntegerMessage::_Internal {
 public:
};

IntegerMessage::IntegerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.IntegerMessage)
}
IntegerMessage::IntegerMessage(const IntegerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_type_, &from.message_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:message.IntegerMessage)
}

inline void IntegerMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&message_type_)) + sizeof(value_));
}

IntegerMessage::~IntegerMessage() {
  // @@protoc_insertion_point(destructor:message.IntegerMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntegerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntegerMessage::ArenaDtor(void* object) {
  IntegerMessage* _this = reinterpret_cast< IntegerMessage* >(object);
  (void)_this;
}
void IntegerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntegerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.IntegerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&message_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&message_type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.IntegerMessageType message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::message::IntegerMessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.IntegerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.IntegerMessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.IntegerMessage)
  return target;
}

size_t IntegerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.IntegerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.IntegerMessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntegerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntegerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntegerMessage::GetClassData() const { return &_class_data_; }

void IntegerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntegerMessage *>(to)->MergeFrom(
      static_cast<const IntegerMessage &>(from));
}


void IntegerMessage::MergeFrom(const IntegerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.IntegerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntegerMessage::CopyFrom(const IntegerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.IntegerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerMessage::IsInitialized() const {
  return true;
}

void IntegerMessage::InternalSwap(IntegerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegerMessage, value_)
      + sizeof(IntegerMessage::value_)
      - PROTOBUF_FIELD_OFFSET(IntegerMessage, message_type_)>(
          reinterpret_cast<char*>(&message_type_),
          reinterpret_cast<char*>(&other->message_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[10]);
}

// ===================================================================

class Gate::_Internal {
 public:
};

Gate::Gate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.Gate)
}
Gate::Gate(const Gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gate_direction_, &from.gate_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_type_) -
    reinterpret_cast<char*>(&gate_direction_)) + sizeof(gate_type_));
  // @@protoc_insertion_point(copy_constructor:message.Gate)
}

inline void Gate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gate_direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gate_type_) -
    reinterpret_cast<char*>(&gate_direction_)) + sizeof(gate_type_));
}

Gate::~Gate() {
  // @@protoc_insertion_point(destructor:message.Gate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Gate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Gate::ArenaDtor(void* object) {
  Gate* _this = reinterpret_cast< Gate* >(object);
  (void)_this;
}
void Gate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gate::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Gate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gate_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_type_) -
      reinterpret_cast<char*>(&gate_direction_)) + sizeof(gate_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.GateDirection gate_direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gate_direction(static_cast<::message::GateDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .message.GateType gate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gate_type(static_cast<::message::GateType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Gate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.GateDirection gate_direction = 1;
  if (this->_internal_gate_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gate_direction(), target);
  }

  // .message.GateType gate_type = 2;
  if (this->_internal_gate_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gate_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Gate)
  return target;
}

size_t Gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Gate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.GateDirection gate_direction = 1;
  if (this->_internal_gate_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gate_direction());
  }

  // .message.GateType gate_type = 2;
  if (this->_internal_gate_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gate_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Gate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gate::GetClassData() const { return &_class_data_; }

void Gate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Gate *>(to)->MergeFrom(
      static_cast<const Gate &>(from));
}


void Gate::MergeFrom(const Gate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Gate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gate_direction() != 0) {
    _internal_set_gate_direction(from._internal_gate_direction());
  }
  if (from._internal_gate_type() != 0) {
    _internal_set_gate_type(from._internal_gate_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gate::CopyFrom(const Gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate::IsInitialized() const {
  return true;
}

void Gate::InternalSwap(Gate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gate, gate_type_)
      + sizeof(Gate::gate_type_)
      - PROTOBUF_FIELD_OFFSET(Gate, gate_direction_)>(
          reinterpret_cast<char*>(&gate_direction_),
          reinterpret_cast<char*>(&other->gate_direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[11]);
}

// ===================================================================

class GateMessage::_Internal {
 public:
};

GateMessage::GateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.GateMessage)
}
GateMessage::GateMessage(const GateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gates_(from.gates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.GateMessage)
}

inline void GateMessage::SharedCtor() {
}

GateMessage::~GateMessage() {
  // @@protoc_insertion_point(destructor:message.GateMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GateMessage::ArenaDtor(void* object) {
  GateMessage* _this = reinterpret_cast< GateMessage* >(object);
  (void)_this;
}
void GateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.GateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .message.Gate gates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.Gate gates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GateMessage)
  return target;
}

size_t GateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.GateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.Gate gates = 1;
  total_size += 1UL * this->_internal_gates_size();
  for (const auto& msg : this->gates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GateMessage::GetClassData() const { return &_class_data_; }

void GateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GateMessage *>(to)->MergeFrom(
      static_cast<const GateMessage &>(from));
}


void GateMessage::MergeFrom(const GateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.GateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gates_.MergeFrom(from.gates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GateMessage::CopyFrom(const GateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.GateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateMessage::IsInitialized() const {
  return true;
}

void GateMessage::InternalSwap(GateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gates_.InternalSwap(&other->gates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[12]);
}

// ===================================================================

class EnterGateMessage::_Internal {
 public:
};

EnterGateMessage::EnterGateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.EnterGateMessage)
}
EnterGateMessage::EnterGateMessage(const EnterGateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gate_direction_ = from.gate_direction_;
  // @@protoc_insertion_point(copy_constructor:message.EnterGateMessage)
}

inline void EnterGateMessage::SharedCtor() {
gate_direction_ = 0;
}

EnterGateMessage::~EnterGateMessage() {
  // @@protoc_insertion_point(destructor:message.EnterGateMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnterGateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterGateMessage::ArenaDtor(void* object) {
  EnterGateMessage* _this = reinterpret_cast< EnterGateMessage* >(object);
  (void)_this;
}
void EnterGateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterGateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnterGateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.EnterGateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gate_direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterGateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.GateDirection gate_direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gate_direction(static_cast<::message::GateDirection>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterGateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.EnterGateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.GateDirection gate_direction = 2;
  if (this->_internal_gate_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gate_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.EnterGateMessage)
  return target;
}

size_t EnterGateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.EnterGateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.GateDirection gate_direction = 2;
  if (this->_internal_gate_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gate_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterGateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnterGateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterGateMessage::GetClassData() const { return &_class_data_; }

void EnterGateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnterGateMessage *>(to)->MergeFrom(
      static_cast<const EnterGateMessage &>(from));
}


void EnterGateMessage::MergeFrom(const EnterGateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.EnterGateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gate_direction() != 0) {
    _internal_set_gate_direction(from._internal_gate_direction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterGateMessage::CopyFrom(const EnterGateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.EnterGateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGateMessage::IsInitialized() const {
  return true;
}

void EnterGateMessage::InternalSwap(EnterGateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gate_direction_, other->gate_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterGateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[13]);
}

// ===================================================================

class EnterGateResultMessage::_Internal {
 public:
  static const ::message::Gate& gate(const EnterGateResultMessage* msg);
};

const ::message::Gate&
EnterGateResultMessage::_Internal::gate(const EnterGateResultMessage* msg) {
  return *msg->gate_;
}
EnterGateResultMessage::EnterGateResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.EnterGateResultMessage)
}
EnterGateResultMessage::EnterGateResultMessage(const EnterGateResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gate()) {
    gate_ = new ::message::Gate(*from.gate_);
  } else {
    gate_ = nullptr;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:message.EnterGateResultMessage)
}

inline void EnterGateResultMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&gate_)) + sizeof(player_id_));
}

EnterGateResultMessage::~EnterGateResultMessage() {
  // @@protoc_insertion_point(destructor:message.EnterGateResultMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnterGateResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete gate_;
}

void EnterGateResultMessage::ArenaDtor(void* object) {
  EnterGateResultMessage* _this = reinterpret_cast< EnterGateResultMessage* >(object);
  (void)_this;
}
void EnterGateResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterGateResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnterGateResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.EnterGateResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && gate_ != nullptr) {
    delete gate_;
  }
  gate_ = nullptr;
  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterGateResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .message.Gate gate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterGateResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.EnterGateResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .message.Gate gate = 2;
  if (this->_internal_has_gate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.EnterGateResultMessage)
  return target;
}

size_t EnterGateResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.EnterGateResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.Gate gate = 2;
  if (this->_internal_has_gate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gate_);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterGateResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnterGateResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterGateResultMessage::GetClassData() const { return &_class_data_; }

void EnterGateResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnterGateResultMessage *>(to)->MergeFrom(
      static_cast<const EnterGateResultMessage &>(from));
}


void EnterGateResultMessage::MergeFrom(const EnterGateResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.EnterGateResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gate()) {
    _internal_mutable_gate()->::message::Gate::MergeFrom(from._internal_gate());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterGateResultMessage::CopyFrom(const EnterGateResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.EnterGateResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGateResultMessage::IsInitialized() const {
  return true;
}

void EnterGateResultMessage::InternalSwap(EnterGateResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterGateResultMessage, player_id_)
      + sizeof(EnterGateResultMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(EnterGateResultMessage, gate_)>(
          reinterpret_cast<char*>(&gate_),
          reinterpret_cast<char*>(&other->gate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterGateResultMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[14]);
}

// ===================================================================

class PlayerResultMessage::_Internal {
 public:
};

PlayerResultMessage::PlayerResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.PlayerResultMessage)
}
PlayerResultMessage::PlayerResultMessage(const PlayerResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_result_, &from.player_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&player_result_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:message.PlayerResultMessage)
}

inline void PlayerResultMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&player_result_)) + sizeof(player_id_));
}

PlayerResultMessage::~PlayerResultMessage() {
  // @@protoc_insertion_point(destructor:message.PlayerResultMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerResultMessage::ArenaDtor(void* object) {
  PlayerResultMessage* _this = reinterpret_cast< PlayerResultMessage* >(object);
  (void)_this;
}
void PlayerResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PlayerResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&player_result_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.PlayerResult player_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_player_result(static_cast<::message::PlayerResult>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PlayerResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.PlayerResult player_result = 1;
  if (this->_internal_player_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_player_result(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PlayerResultMessage)
  return target;
}

size_t PlayerResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PlayerResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.PlayerResult player_result = 1;
  if (this->_internal_player_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_player_result());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerResultMessage::GetClassData() const { return &_class_data_; }

void PlayerResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerResultMessage *>(to)->MergeFrom(
      static_cast<const PlayerResultMessage &>(from));
}


void PlayerResultMessage::MergeFrom(const PlayerResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PlayerResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_result() != 0) {
    _internal_set_player_result(from._internal_player_result());
  }
  if (from._internal_player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerResultMessage::CopyFrom(const PlayerResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PlayerResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResultMessage::IsInitialized() const {
  return true;
}

void PlayerResultMessage::InternalSwap(PlayerResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResultMessage, player_id_)
      + sizeof(PlayerResultMessage::player_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerResultMessage, player_result_)>(
          reinterpret_cast<char*>(&player_result_),
          reinterpret_cast<char*>(&other->player_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerResultMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[15]);
}

// ===================================================================

class GameResultMessage::_Internal {
 public:
};

GameResultMessage::GameResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  player_result_messages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.GameResultMessage)
}
GameResultMessage::GameResultMessage(const GameResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_result_messages_(from.player_result_messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_result_ = from.game_result_;
  // @@protoc_insertion_point(copy_constructor:message.GameResultMessage)
}

inline void GameResultMessage::SharedCtor() {
game_result_ = 0;
}

GameResultMessage::~GameResultMessage() {
  // @@protoc_insertion_point(destructor:message.GameResultMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameResultMessage::ArenaDtor(void* object) {
  GameResultMessage* _this = reinterpret_cast< GameResultMessage* >(object);
  (void)_this;
}
void GameResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.GameResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_result_messages_.Clear();
  game_result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message.GameResult game_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_game_result(static_cast<::message::GameResult>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .message.PlayerResultMessage player_result_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_result_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GameResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.GameResult game_result = 1;
  if (this->_internal_game_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_game_result(), target);
  }

  // repeated .message.PlayerResultMessage player_result_messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_result_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_player_result_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GameResultMessage)
  return target;
}

size_t GameResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.GameResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.PlayerResultMessage player_result_messages = 2;
  total_size += 1UL * this->_internal_player_result_messages_size();
  for (const auto& msg : this->player_result_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.GameResult game_result = 1;
  if (this->_internal_game_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameResultMessage::GetClassData() const { return &_class_data_; }

void GameResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameResultMessage *>(to)->MergeFrom(
      static_cast<const GameResultMessage &>(from));
}


void GameResultMessage::MergeFrom(const GameResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.GameResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  player_result_messages_.MergeFrom(from.player_result_messages_);
  if (from._internal_game_result() != 0) {
    _internal_set_game_result(from._internal_game_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameResultMessage::CopyFrom(const GameResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.GameResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResultMessage::IsInitialized() const {
  return true;
}

void GameResultMessage::InternalSwap(GameResultMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_result_messages_.InternalSwap(&other->player_result_messages_);
  swap(game_result_, other->game_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResultMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[16]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:message.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_player_id_, &from.from_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_to_all_) -
    reinterpret_cast<char*>(&from_player_id_)) + sizeof(is_to_all_));
  // @@protoc_insertion_point(copy_constructor:message.ChatMessage)
}

inline void ChatMessage::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_to_all_) -
    reinterpret_cast<char*>(&from_player_id_)) + sizeof(is_to_all_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:message.ChatMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::ArenaDtor(void* object) {
  ChatMessage* _this = reinterpret_cast< ChatMessage* >(object);
  (void)_this;
}
void ChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  ::memset(&from_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_to_all_) -
      reinterpret_cast<char*>(&from_player_id_)) + sizeof(is_to_all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_to_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          is_to_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.ChatMessage.content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_player_id = 1;
  if (this->_internal_from_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_from_player_id(), target);
  }

  // bool is_to_all = 2;
  if (this->_internal_is_to_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_to_all(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 from_player_id = 1;
  if (this->_internal_from_player_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_from_player_id());
  }

  // bool is_to_all = 2;
  if (this->_internal_is_to_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }

void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessage *>(to)->MergeFrom(
      static_cast<const ChatMessage &>(from));
}


void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (from._internal_from_player_id() != 0) {
    _internal_set_from_player_id(from._internal_from_player_id());
  }
  if (from._internal_is_to_all() != 0) {
    _internal_set_is_to_all(from._internal_is_to_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, is_to_all_)
      + sizeof(ChatMessage::is_to_all_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, from_player_id_)>(
          reinterpret_cast<char*>(&from_player_id_),
          reinterpret_cast<char*>(&other->from_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::HelloMessage* Arena::CreateMaybeMessage< ::message::HelloMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::HelloMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Character* Arena::CreateMaybeMessage< ::message::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::message::MessageWrapper* Arena::CreateMaybeMessage< ::message::MessageWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::MessageWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoomMessage* Arena::CreateMaybeMessage< ::message::RoomMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoomMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::StringMessage* Arena::CreateMaybeMessage< ::message::StringMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::StringMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::LobbyMessage* Arena::CreateMaybeMessage< ::message::LobbyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::LobbyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::StartReceiveMsgMessage* Arena::CreateMaybeMessage< ::message::StartReceiveMsgMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::StartReceiveMsgMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::PlayerBasicMessage* Arena::CreateMaybeMessage< ::message::PlayerBasicMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::PlayerBasicMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::PropTryGetMessage* Arena::CreateMaybeMessage< ::message::PropTryGetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::PropTryGetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::PropGetMessage* Arena::CreateMaybeMessage< ::message::PropGetMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::PropGetMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::IntegerMessage* Arena::CreateMaybeMessage< ::message::IntegerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::IntegerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Gate* Arena::CreateMaybeMessage< ::message::Gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Gate >(arena);
}
template<> PROTOBUF_NOINLINE ::message::GateMessage* Arena::CreateMaybeMessage< ::message::GateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::GateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::EnterGateMessage* Arena::CreateMaybeMessage< ::message::EnterGateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::EnterGateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::EnterGateResultMessage* Arena::CreateMaybeMessage< ::message::EnterGateResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::EnterGateResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::PlayerResultMessage* Arena::CreateMaybeMessage< ::message::PlayerResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::PlayerResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::GameResultMessage* Arena::CreateMaybeMessage< ::message::GameResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::GameResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ChatMessage* Arena::CreateMaybeMessage< ::message::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
